import math
import random
"""
n = 27827431791848080510562137781647062324705519074578573542080709104213290885384138112622589204213039784586739531100900121818773231746353628701496871262808779177634066307811340728596967443136248066021733132197733950698309054408992256119278475934840426097782450035074949407003770020982281271016621089217842433829236239812065860591373247969334485969558679735740571326071758317172261557282013095697983483074361658192130930535327572516432407351968014347094777815311598324897654188279810868213771660240365442631965923595072542164009330360016248531635617943805455233362064406931834698027641363345541747316319322362708173430359
e = 65537
c = 887926220667968890879323993322751057453505329282464121192166661668652988472392200833617263356802400786530829198630338132461040854817240045862231163192066406864853778440878582265466417227185832620254137042793856626244988925048088111119004607890025763414508753895225492623193311559922084796417413460281461365304057774060057555727153509262542834065135887011058656162069317322056106544821682305831737729496650051318517028889255487115139500943568231274002663378391765162497239270806776752479703679390618212766047550742574483461059727193901578391568568448774297557525118817107928003001667639915132073895805521242644001132
r = 163104269992791295067767008325597264071947458742400688173529362951284000168497975807685789656545622164680196654779928766806798485048740155505566331845589263626813345997348999250857394231703013905659296268991584448212774337704919390397516784976219511463415022562211148136000912563325229529692182027300627232945
mask = int("55" * 128, 16)
"""
#testcase
p=997
q=991
n=p*q
mask = int("555",16)
r = p & mask
mask = mask << 1
r += q & mask

r_bin = bin(r)[2:]

p = r & mask
mask<<=1
q = r & mask


q_bin = bin(q)[2:].zfill(len(r_bin))
p_bin = bin(p)[2:].zfill(len(r_bin))
 
with open("q.txt","w") as f:
    f.write(q_bin+"\n")

with open("p.txt","w") as f:
    f.write(p_bin+"\n")

with open("out.txt","w") as f:
    f.write("")

record = float("inf")
old_p=p_bin[::]
old_q=q_bin[::]


for _ in range(100):

    
    
    for i in range(len(r_bin)):
        if i%2==0:
            new_p=p_bin[:i]+"1"+p_bin[i+1:]
            p_int=int(new_p,2)
            q_int=int(q_bin,2)
            if p_int*q_int<=n:
                p_bin=new_p[::]

        else:
            new_q=q_bin[:i]+"1"+q_bin[i+1:]
            p_int=int(p_bin,2)
            q_int=int(new_q,2)
            if p_int*q_int<=n:
                q_bin=new_q[::]
        
        with open("q.txt","a") as f:
            f.write(q_bin+"\n")
        with open("p.txt","a") as f:
            f.write(p_bin+"\n")
        pq=int(p_bin,2)*int(q_bin,2)
        with open("out.txt","a") as f:
            f.write("- "*20+"\n")
            f.write(str(i)+"\n")
            f.write("p: "+p_bin+"\n")
            f.write("q: "+q_bin+"\n")
            f.write("p*q: "+str(pq)+"\n")
            f.write("n-p*q: "+str(n-pq)+"\n")
            f.write("log2(n-p*q): "+str(math.log2(n-pq))+"\n")
        
    if int(p_bin,2)*int(q_bin,2)==n:
        print("found")
        print("p: "+p_bin)
        print("q: "+q_bin)
        break
    pq=int(p_bin,2)*int(q_bin,2)
    score=n-pq
    print(math.log2(score))
    if score<record:
        record=score
        old_p=p_bin[::]
        old_q=q_bin[::]
        
    else:
        p_bin=old_p[::]
        q_bin=old_q[::]
    
    while int(p_bin,2)*int(q_bin,2)>n:
        
        x=random.randint(0,len(r_bin)-1)
        if x%2==0:
            if p_bin[x]=="1":
                p_bin=p_bin[:x]+"0"+p_bin[x+1:]
            else:
                p_bin=p_bin[:x]+"1"+p_bin[x+1:]
        else:
            if q_bin[x]=="1":
                q_bin=q_bin[:x]+"0"+q_bin[x+1:]
            else:
                q_bin=q_bin[:x]+"1"+q_bin[x+1:]

    
        

        